// ==UserScript==
// @name         Is_Settled_v2
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Finds what Authorizations have a corresponding batch
// @author       Susan H
// @match        https://translink.transfirst.com/content/MerchantReports/MerchantAuthorization.aspx*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=transfirst.com
// @grant        GM_setClipboard
// @grant        GM_notification
// @downloadURL  https://github.com/SusanHex/kaisha_scripts/raw/production/Is_Settled_v2.js
// ==/UserScript==

(async function() {
    'use strict';
    window.SETTLE_TABLE = {};

    function copyInformation(click_event) {
        let tr = click_event.target;
        let auth_date = tr.parentElement.children[0].innerText.split(' ')[0];
        let auth_amount = tr.parentElement.children[3].innerText;
        let auth_num = tr.parentElement.children[7].innerText;
        let last_four = auth_num.slice(-4);
        let cc_brand = '';
        if (auth_num[0] === '6') {
            cc_brand = 'DS';
        }
        else if (auth_num[0] === '5') {
            cc_brand = 'MC';
        }
        else if (auth_num[0] === '4') {
            cc_brand = 'VS';
        }
        else if (auth_num[0] === '3') {
            cc_brand = 'AM';
        };
        GM_setClipboard(`${auth_date} ${auth_amount} ${cc_brand}#${last_four}`, 'text', () => console.log('Coppied to clipboard'));
        GM_notification({
            text: `${auth_date} ${auth_amount} ${cc_brand}#${last_four}`,
            title: 'Copied',
            },
        );
    }

    function populateSettleTable() {
        let auth_table = document.getElementById('dgAuthorization');
        for (const tr of Array.from(auth_table.children[0].children).slice(1)) {
            let auth_code_td = tr.children[12];
            auth_code_td.addEventListener("click", copyInformation);
            const auth_code = auth_code_td.innerText;
            if (auth_code) {
                const token_card = tr.children[7].innerText;
                if(Object.keys(SETTLE_TABLE).includes(token_card)) {
                    Object.assign(SETTLE_TABLE[token_card], {[auth_code]: auth_code_td});
                } else {
                    Object.assign(SETTLE_TABLE, {[token_card]: {
                        [auth_code]: auth_code_td,
                    }});
                }
            }
        }
    }


    const cardActivity = (merchant_id, token_card) => fetch(
        `https://translink.transfirst.com/Content/MerchantReports/MerchantCardActivity.aspx?sendingPage=MerchantAuthorization&detailMerchantID=${merchant_id}&detailSelectedCard=${token_card}`
    ).then((resp) => {
        if (resp.ok) {
            return resp.text()
        }
        else {
            return Promise.reject(`Error, Response: ${resp.statusText}`)
        }
    }).then((page_data) => {
        const token_card = page_data.match(/(?<=detailSelectedCard\=)(\d+\.+\d+)/)[0];
        console.log(token_card)
        const page = page_data.slice(page_data.indexOf('Transactions'), page_data.indexOf('Authorizations'));
        for (const approval_code of Object.keys(SETTLE_TABLE[token_card])) {
            if (page.includes(approval_code)) {
                SETTLE_TABLE[token_card][approval_code].style.backgroundColor = 'Green';
            } else {
                SETTLE_TABLE[token_card][approval_code].style.backgroundColor = 'Red';
                SETTLE_TABLE[token_card][approval_code].innerText += '*';
            }
        }

        return page
    });

    async function isSettled() {
        const merchant_id = document.getElementById('ccMerchantSearchControl_Merchant_ID').value;
        const promise_array = [];
        for (const token_card of Object.keys(SETTLE_TABLE)) {
            promise_array.push(cardActivity(merchant_id, token_card));
        }
        await Promise.all(promise_array);
    }
    populateSettleTable();
    await isSettled();
})();
